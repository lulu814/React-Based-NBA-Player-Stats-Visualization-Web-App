{"ast":null,"code":"const debug = require(\"debug\")(\"nba\");\n\nconst template = require(\"nba-client-template\");\n\nconst camelCase = require(\"camel-case\");\n\nconst {\n  general,\n  players,\n  base,\n  lineups\n} = require(\"./transforms\");\n\nconst paramMap = {};\ntemplate.parameters.forEach(function (param) {\n  paramMap[param.name] = param;\n});\nconst transformMap = {\n  playerProfile: general,\n  playerInfo: general,\n  playersInfo: players,\n  teamStats: base,\n  teamSplits: general,\n  teamYears: base,\n  playerSplits: general,\n  shots: general,\n  scoreboard: general,\n  playByPlay: general,\n  teamHistoricalLeaders: general,\n  teamInfoCommon: general,\n  commonTeamRoster: general,\n  teamPlayerDashboard: general,\n  lineups: lineups,\n  playerTracking: general,\n  homepageV2: general,\n  assistTracker: general,\n  playerStats: general,\n  playerClutch: general,\n  teamClutch: general,\n  playerShooting: general,\n  teamShooting: general,\n  teamPlayerOnOffDetails: general,\n  playerCompare: general\n};\n\nfunction makeStatsMethod(endpoint, transport) {\n  const defaults = {};\n  endpoint.parameters.forEach(function (param) {\n    defaults[param] = paramMap[param].default;\n  });\n  const ccName = camelCase(endpoint.name);\n  const transform = transformMap[ccName]; // if (transform == null) {\n  //   throw new Error(`No transform found for ${ccName}`);\n  // }\n\n  function statsMethod(query = {}) {\n    const reqParams = Object.assign({}, defaults, query);\n    debug(\"stats request\", endpoint.url, reqParams);\n    return transport(endpoint.url, reqParams).then(function (response) {\n      if (response == null) return; // response is something like \"GameID is required\"\n\n      if (typeof response === \"string\") throw new Error(response);\n      return transform ? transform(response) : response;\n    });\n  }\n\n  statsMethod.parameters = endpoint.parameters;\n  statsMethod.defaults = defaults;\n  return statsMethod;\n}\n\nfunction makeStatsClient(transport) {\n  const client = {};\n  template.stats_endpoints.forEach(function (endpoint) {\n    client[camelCase(endpoint.name)] = makeStatsMethod(endpoint, transport);\n  });\n  client.withTransport = makeStatsClient;\n  return client;\n}\n\nmodule.exports = makeStatsClient(require(\"./get-json\"));","map":{"version":3,"sources":["/Users/liulu/Desktop/Projects/Laioffer/NBA/nba-web/node_modules/nba/src/stats.js"],"names":["debug","require","template","camelCase","general","players","base","lineups","paramMap","parameters","forEach","param","name","transformMap","playerProfile","playerInfo","playersInfo","teamStats","teamSplits","teamYears","playerSplits","shots","scoreboard","playByPlay","teamHistoricalLeaders","teamInfoCommon","commonTeamRoster","teamPlayerDashboard","playerTracking","homepageV2","assistTracker","playerStats","playerClutch","teamClutch","playerShooting","teamShooting","teamPlayerOnOffDetails","playerCompare","makeStatsMethod","endpoint","transport","defaults","default","ccName","transform","statsMethod","query","reqParams","Object","assign","url","then","response","Error","makeStatsClient","client","stats_endpoints","withTransport","module","exports"],"mappings":"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","sourcesContent":["const debug = require(\"debug\")(\"nba\");\nconst template = require(\"nba-client-template\");\nconst camelCase = require(\"camel-case\");\n\nconst { general, players, base, lineups } = require(\"./transforms\");\n\nconst paramMap = {};\ntemplate.parameters.forEach(function (param) {\n  paramMap[param.name] = param;\n});\n\nconst transformMap = {\n  playerProfile:  general,\n  playerInfo: general,\n  playersInfo: players,\n  teamStats: base,\n  teamSplits: general,\n  teamYears: base,\n  playerSplits: general,\n  shots: general,\n  scoreboard: general,\n  playByPlay: general,\n  teamHistoricalLeaders: general,\n  teamInfoCommon: general,\n  commonTeamRoster: general,\n  teamPlayerDashboard: general,\n  lineups: lineups,\n  playerTracking: general,\n  homepageV2: general,\n  assistTracker: general,\n  playerStats: general,\n  playerClutch: general,\n  teamClutch: general,\n  playerShooting: general,\n  teamShooting: general,\n  teamPlayerOnOffDetails: general,\n  playerCompare: general,\n};\n\nfunction makeStatsMethod (endpoint, transport) {\n\n  const defaults = {};\n  endpoint.parameters.forEach(function (param) {\n    defaults[param] = paramMap[param].default;\n  });\n\n  const ccName = camelCase(endpoint.name);\n  const transform = transformMap[ccName];\n  // if (transform == null) {\n  //   throw new Error(`No transform found for ${ccName}`);\n  // }\n\n  function statsMethod (query = {}) {\n    const reqParams = Object.assign({}, defaults, query);\n\n    debug(\"stats request\", endpoint.url, reqParams);\n    return transport(endpoint.url, reqParams).then(function (response) {\n      if (response == null) return;\n\n      // response is something like \"GameID is required\"\n      if (typeof response === \"string\") throw new Error(response);\n\n      return transform ? transform(response) : response;\n    });\n  }\n\n  statsMethod.parameters = endpoint.parameters;\n  statsMethod.defaults = defaults;\n  return statsMethod;\n}\n\nfunction makeStatsClient (transport) {\n  const client = {};\n  template.stats_endpoints.forEach(function (endpoint) {\n    client[camelCase(endpoint.name)] = makeStatsMethod(endpoint, transport);\n  });\n  client.withTransport = makeStatsClient;\n  return client;\n}\n\nmodule.exports = makeStatsClient(require(\"./get-json\"));\n"]},"metadata":{},"sourceType":"script"}